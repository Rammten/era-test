// RUN: solc --yul --mlir-action=print-llvm-ir --mlir-target=eravm %s | FileCheck %s
// RUN: solc --yul --mlir-action=print-asm --mlir-target=eravm %s | FileCheck --check-prefix=ASM %s

object "Simple" {
  code {
    return(10, 11)
  }
  object "Simple_deployed" {
    code {
      return(20, 21)
    }
  }
}
// NOTE: Assertions have been autogenerated by test/updFileCheckTest.py
// CHECK: ; ModuleID = 'LLVMDialectModule'
// CHECK-NEXT: source_filename = "LLVMDialectModule"
// CHECK-EMPTY:
// CHECK-NEXT: declare ptr @malloc(i64)
// CHECK-EMPTY:
// CHECK-NEXT: declare void @free(ptr)
// CHECK-EMPTY:
// CHECK-NEXT: declare void @__return(i256, i256, i256)
// CHECK-EMPTY:
// CHECK-NEXT: define private void @__deploy() !dbg !3 {
// CHECK-NEXT:   store i256 32, ptr addrspace(2) inttoptr (i256 256 to ptr addrspace(2)), align 4, !dbg !7
// CHECK-NEXT:   store i256 0, ptr addrspace(2) inttoptr (i256 288 to ptr addrspace(2)), align 4, !dbg !7
// CHECK-NEXT:   call void @__return(i256 256, i256 64, i256 2), !dbg !7
// CHECK-NEXT:   unreachable, !dbg !7
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: define private void @__runtime() !dbg !10 {
// CHECK-NEXT:   call void @__return(i256 20, i256 21, i256 0), !dbg !11
// CHECK-NEXT:   unreachable, !dbg !11
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: define i256 @__entry(ptr addrspace(3) %0, i256 %1, i256 %2, i256 %3, i256 %4, i256 %5, i256 %6, i256 %7, i256 %8, i256 %9, i256 %10, i256 %11) {
// CHECK-NEXT:   %13 = and i256 %1, 1
// CHECK-NEXT:   %14 = icmp eq i256 %13, 1
// CHECK-NEXT:   br i1 %14, label %15, label %16
// CHECK-EMPTY:
// CHECK-NEXT: 15:                                               ; preds = %12
// CHECK-NEXT:   call void @__deploy()
// CHECK-NEXT:   br label %17
// CHECK-EMPTY:
// CHECK-NEXT: 16:                                               ; preds = %12
// CHECK-NEXT:   call void @__runtime()
// CHECK-NEXT:   br label %17
// CHECK-EMPTY:
// CHECK-NEXT: 17:                                               ; preds = %15, %16
// CHECK-NEXT:   unreachable
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: !llvm.dbg.cu = !{!0}
// CHECK-NEXT: !llvm.module.flags = !{!2}
// CHECK-EMPTY:
// CHECK-NEXT: !0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "mlir", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
// CHECK-NEXT: !1 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !2 = !{i32 2, !"Debug Info Version", i32 3}
// CHECK-NEXT: !3 = distinct !DISubprogram(name: "__deploy", linkageName: "__deploy", scope: null, file: !4, type: !5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !4 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !5 = !DISubroutineType(types: !6)
// CHECK-NEXT: !6 = !{}
// CHECK-NEXT: !7 = !DILocation(line: 5, column: 4, scope: !8)
// CHECK-NEXT: !8 = !DILexicalBlockFile(scope: !3, file: !9, discriminator: 0)
// CHECK-NEXT: !9 = !DIFile(filename: {{.*}}, directory: {{.*}})
// CHECK-NEXT: !10 = distinct !DISubprogram(name: "__runtime", linkageName: "__runtime", scope: null, file: !4, type: !5, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6)
// CHECK-NEXT: !11 = !DILocation(line: 9, column: 6, scope: !12)
// CHECK-NEXT: !12 = !DILexicalBlockFile(scope: !10, file: !9, discriminator: 0)
// CHECK-EMPTY:
// ASM: 	.text
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: __deploy:
// ASM-NEXT: .func_begin0:
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: 	.loc	1 0 0
// ASM-NEXT: 	add	32, r0, r1
// ASM-NEXT: .tmp0:
// ASM-NEXT: 	.file	{{.*}}
// ASM-NEXT: 	.loc	2 5 4 prologue_end
// ASM-NEXT: 	st.2	256, r1
// ASM-NEXT: 	st.2	288, r0
// ASM-NEXT: 	add	256, r0, r1
// ASM-NEXT: 	add	64, r0, r2
// ASM-NEXT: 	add	2, r0, r3
// ASM-NEXT: 	near_call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: .tmp1:
// ASM-NEXT: .func_end0:
// ASM-EMPTY:
// ASM-NEXT: __runtime:
// ASM-NEXT: .func_begin1:
// ASM-NEXT: 	.loc	1 0 0
// ASM-NEXT: 	add	20, r0, r1
// ASM-NEXT: 	add	21, r0, r2
// ASM-NEXT: .tmp2:
// ASM-NEXT: 	.loc	2 9 6 prologue_end
// ASM-NEXT: 	add	r0, r0, r3
// ASM-NEXT: 	near_call	r0, @__return, @DEFAULT_UNWIND
// ASM-NEXT: .tmp3:
// ASM-NEXT: .func_end1:
// ASM-EMPTY:
// ASM-NEXT: 	.globl	__entry
// ASM-NEXT: __entry:
// ASM-NEXT: .func_begin2:
// ASM-NEXT: 	and!	1, r2, r1
// ASM-NEXT: 	jump.eq	@.BB2_2
// ASM-NEXT: 	near_call	r0, @__deploy, @DEFAULT_UNWIND
// ASM-NEXT: .BB2_2:
// ASM-NEXT: 	near_call	r0, @__runtime, @DEFAULT_UNWIND
// ASM-NEXT: .func_end2:
// ASM-EMPTY:
// ASM-NEXT: 	.debug_abbrev
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	37
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	19
// ASM-NEXT: 	.byte	5
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	16
// ASM-NEXT: 	.byte	23
// ASM-NEXT: 	.byte	27
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.ascii	"\264B"
// ASM-NEXT: 	.byte	25
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	18
// ASM-NEXT: 	.byte	6
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	2
// ASM-NEXT: 	.byte	46
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	17
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.byte	18
// ASM-NEXT: 	.byte	6
// ASM-NEXT: 	.byte	110
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	3
// ASM-NEXT: 	.byte	14
// ASM-NEXT: 	.byte	63
// ASM-NEXT: 	.byte	25
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.byte	0
// ASM-NEXT: 	.debug_info
// ASM-NEXT: .cu_begin0:
// ASM-NEXT: 	.long	@.debug_info_end0-@.debug_info_start0
// ASM-NEXT: .debug_info_start0:
// ASM-NEXT: 	.short	4
// ASM-NEXT: 	.long	@.debug_abbrev
// ASM-NEXT: 	.byte	4
// ASM-NEXT: 	.byte	1
// ASM-NEXT: 	.long	@.info_string0
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.info_string1
// ASM-NEXT: 	.long	@.line_table_start0
// ASM-NEXT: 	.long	@.info_string2
// ASM-EMPTY:
// ASM-NEXT: .cell	@.func_begin0
// ASM-NEXT: 	.long	@.func_end1-@.func_begin0
// ASM-NEXT: 	.byte	2
// ASM-NEXT: .cell	@.func_begin0
// ASM-NEXT: 	.long	@.func_end0-@.func_begin0
// ASM-NEXT: 	.long	@.info_string3
// ASM-NEXT: 	.long	@.info_string3
// ASM-EMPTY:
// ASM-NEXT: 	.byte	2
// ASM-NEXT: .cell	@.func_begin1
// ASM-NEXT: 	.long	@.func_end1-@.func_begin1
// ASM-NEXT: 	.long	@.info_string4
// ASM-NEXT: 	.long	@.info_string4
// ASM-EMPTY:
// ASM-NEXT: 	.byte	0
// ASM-NEXT: .debug_info_end0:
// ASM-NEXT: 	.debug_str
// ASM-NEXT: .info_string0:
// ASM-NEXT: 	.asciz	"mlir"
// ASM-NEXT: .info_string1:
// ASM-NEXT: 	.asciz	"LLVMDialectModule"
// ASM-NEXT: .info_string2:
// ASM-NEXT: 	.asciz	"/"
// ASM-NEXT: .info_string3:
// ASM-NEXT: 	.asciz	"__deploy"
// ASM-NEXT: .info_string4:
// ASM-NEXT: 	.asciz	"__runtime"
// ASM-NEXT: 	.debug_pubnames
// ASM-NEXT: 	.long	@.pubNames_end0-@.pubNames_start0
// ASM-NEXT: .pubNames_start0:
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.cu_begin0
// ASM-NEXT: 	.long	157
// ASM-NEXT: 	.long	111
// ASM-NEXT: 	.asciz	"__runtime"
// ASM-NEXT: 	.long	66
// ASM-NEXT: 	.asciz	"__deploy"
// ASM-NEXT: 	.long	0
// ASM-NEXT: .pubNames_end0:
// ASM-NEXT: 	.debug_pubtypes
// ASM-NEXT: 	.long	@.pubTypes_end0-@.pubTypes_start0
// ASM-NEXT: .pubTypes_start0:
// ASM-NEXT: 	.short	2
// ASM-NEXT: 	.long	@.cu_begin0
// ASM-NEXT: 	.long	157
// ASM-NEXT: 	.long	0
// ASM-NEXT: .pubTypes_end0:
// ASM-NEXT: 	.note.GNU-stack
// ASM-NEXT: 	.rodata
// ASM-NEXT: 	.debug_line
// ASM-NEXT: .line_table_start0:
// ASM-EMPTY:
