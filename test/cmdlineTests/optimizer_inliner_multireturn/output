
======= optimizer_inliner_multireturn/input.sol:C =======
EVM assembly:
    /* "optimizer_inliner_multireturn/input.sol":162:298  contract C {... */
  mstore(0x40, 0x80)
  callvalue
  dup1
  iszero
  tag_1
  jumpi
  revert(0x00, 0x00)
tag_1:
  pop
  jump(tag_2)
tag_2:
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "optimizer_inliner_multireturn/input.sol":162:298  contract C {... */
      mstore(0x40, 0x80)
      callvalue
      dup1
      iszero
      tag_1
      jumpi
      revert(0x00, 0x00)
    tag_1:
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0x26121ff0
      eq
      tag_3
      jumpi
      jump(tag_2)
    tag_2:
      revert(0x00, 0x00)
        /* "optimizer_inliner_multireturn/input.sol":179:296  function f() public pure {... */
    tag_3:
      tag_4
      tag_5
      jump	// in
    tag_4:
      stop
    tag_5:
        /* "optimizer_inliner_multireturn/input.sol":219:225  uint x */
      0x00
        /* "optimizer_inliner_multireturn/input.sol":227:233  uint y */
      0x00
        /* "optimizer_inliner_multireturn/input.sol":238:239  0 */
      0x00
        /* "optimizer_inliner_multireturn/input.sol":241:242  1 */
      0x01
        /* "optimizer_inliner_multireturn/input.sol":218:243  (uint x, uint y) = (0, 1) */
      swap2
      pop
      swap2
      pop
        /* "optimizer_inliner_multireturn/input.sol":214:290  for((uint x, uint y) = (0, 1); x < 10; (x, y) = test(x))... */
    tag_7:
        /* "optimizer_inliner_multireturn/input.sol":249:251  10 */
      0x0a
        /* "optimizer_inliner_multireturn/input.sol":245:246  x */
      dup3
        /* "optimizer_inliner_multireturn/input.sol":245:251  x < 10 */
      lt
        /* "optimizer_inliner_multireturn/input.sol":214:290  for((uint x, uint y) = (0, 1); x < 10; (x, y) = test(x))... */
      iszero
      tag_8
      jumpi
    tag_9:
        /* "optimizer_inliner_multireturn/input.sol":262:269  test(x) */
      tag_10
        /* "optimizer_inliner_multireturn/input.sol":267:268  x */
      dup3
        /* "optimizer_inliner_multireturn/input.sol":262:266  test */
      tag_11
        /* "optimizer_inliner_multireturn/input.sol":262:269  test(x) */
      0xffffffff
      and
      jump	// in
    tag_10:
        /* "optimizer_inliner_multireturn/input.sol":253:269  (x, y) = test(x) */
      dup1
      swap3
      pop
      dup2
      swap4
      pop
      pop
      pop
        /* "optimizer_inliner_multireturn/input.sol":214:290  for((uint x, uint y) = (0, 1); x < 10; (x, y) = test(x))... */
      jump(tag_7)
    tag_8:
      pop
      pop
        /* "optimizer_inliner_multireturn/input.sol":179:296  function f() public pure {... */
    tag_6:
      jump	// out
        /* "optimizer_inliner_multireturn/input.sol":60:160  function test(uint x) pure returns (uint, uint)... */
    tag_11:
        /* "optimizer_inliner_multireturn/input.sol":96:100  uint */
      0x00
        /* "optimizer_inliner_multireturn/input.sol":102:106  uint */
      0x00
        /* "optimizer_inliner_multireturn/input.sol":142:143  x */
      dup3
        /* "optimizer_inliner_multireturn/input.sol":146:147  1 */
      0x01
        /* "optimizer_inliner_multireturn/input.sol":142:147  x + 1 */
      add
        /* "optimizer_inliner_multireturn/input.sol":149:150  x */
      dup4
        /* "optimizer_inliner_multireturn/input.sol":134:151  return (x + 1, x) */
      swap2
      pop
      swap2
      pop
      jump(tag_12)
        /* "optimizer_inliner_multireturn/input.sol":60:160  function test(uint x) pure returns (uint, uint)... */
    tag_12:
      swap2
      pop
      swap2
      jump	// out

    auxdata: <AUXDATA REMOVED>
}
