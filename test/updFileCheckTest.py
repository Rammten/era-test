#! /usr/bin/env python3

"""A script to generate FileCheck assertions"""

import argparse
import re
import os
import subprocess
from dataclasses import dataclass

COMMENT_PREFIX = '//'
HEADER = COMMENT_PREFIX + ' NOTE: Assertions have been autogenerated by test/updFileCheckTest.py\n'

@dataclass
class RunLine:
    cmd: str
    check_prefix: str

RUN_CMD_RE = re.compile(r'^\s*' + COMMENT_PREFIX +
                        r'\s*RUN:\s*(?P<cmd>.+?)\|\s*FileCheck.*?')
# TODO: Support --check-prefixes
RUN_PREFIX_RE = re.compile(r'FileCheck.*? --check-prefix=(?P<prefix>\w+)')

def parse_run_line(line):
    if (mat_cmd := RUN_CMD_RE.search(line)):
        if (mat_prefix := RUN_PREFIX_RE.search(line)):
            return RunLine(mat_cmd.group('cmd'), mat_prefix.group('prefix'))
        return RunLine(mat_cmd.group('cmd'), 'CHECK')

    return None

def main():
    # Setup command line options
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--path', default=None, help='Prepend path in $PATH')
    parser.add_argument('input', help='Input file')
    args = parser.parse_args()

    # Handle --path
    if args.path:
        os.environ["PATH"] = args.path + os.pathsep + os.environ["PATH"]

    # Read run lines (i.e.: "RUN: ..." lines) until HEADER
    run_lines = []
    with open(args.input, 'r', encoding='utf-8') as handle:
        insert_pt = handle.seek(0)
        line = handle.readline()
        while line:
            if line == HEADER:
                break
            insert_pt = handle.tell()
            run_line = parse_run_line(line)
            if run_line:
                run_lines.append(run_line)
            line = handle.readline()

    # Substitute %s in run lines with input file name
    for i, val in enumerate(run_lines):
        run_lines[i].cmd = val.cmd.replace('%s', args.input)


    # Compile regex for matching file paths
    # "loc(<path>:<line-col>)" in mlir
    path_res = [re.compile(r' loc\((?P<path>".*?"):\d+:\d+\)')]

    # "filename: <path>" and "directory: <path>" in llvm's debug info
    path_res.append(re.compile(r'filename: (?P<path>".*?")'))
    path_res.append(re.compile(r'directory: (?P<path>".*?")'))

    # ".file ..." in asm
    path_res.append(re.compile(r'\s.file\s(?P<path>.*)'))

    # Write assertions with the corresponding prefix to the input file
    with open(args.input, 'r+', encoding='utf-8') as handle:
        handle.seek(insert_pt)
        handle.writelines([HEADER])
        for run_line in run_lines:
            wrote_first_line = False
            for line in subprocess.check_output(run_line.cmd.split(),
                                                stderr=subprocess.DEVNULL,
                                                text=True).split('\n'):
                assertion = COMMENT_PREFIX + ' ' + run_line.check_prefix
                if line == '':
                    handle.writelines([assertion + '-EMPTY:\n'])
                    wrote_first_line |= True
                    continue
                assertion += '-NEXT: ' if wrote_first_line else ': '
                for path_re in path_res:
                    if (mat_loc := path_re.search(line)):
                        line = line.replace(mat_loc.group('path'), '{{.*}}')
                assertion += line
                handle.writelines([assertion + '\n'])
                wrote_first_line |= True
        handle.truncate()

if __name__ == '__main__':
    main()
